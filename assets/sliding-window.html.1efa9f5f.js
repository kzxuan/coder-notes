import{r as e,o,c,a as n,d as p,F as l,b as s,e as t}from"./app.e5ee52ef.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i=n("h1",{id:"\u6ED1\u52A8\u7A97\u53E3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u6ED1\u52A8\u7A97\u53E3","aria-hidden":"true"},"#"),s(" \u6ED1\u52A8\u7A97\u53E3")],-1),k=n("p",null,"\u7EF4\u62A4\u6ED1\u52A8\u7A97\u2F1D\uFF0C\u901A\u5E38\u9700\u8981\u4F7F\u7528\u53CC\u6307\u9488\u7684\u6280\u5DE7\uFF0C\u6839\u636E\u6ED1\u5165\u548C\u6ED1\u51FA\u64CD\u4F5C\u66F4\u65B0\u6570\u636E\u3002",-1),b=n("h2",{id:"_567-\u5B57\u7B26\u4E32\u7684\u6392\u5217",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_567-\u5B57\u7B26\u4E32\u7684\u6392\u5217","aria-hidden":"true"},"#"),s(" 567. \u5B57\u7B26\u4E32\u7684\u6392\u5217")],-1),m={href:"https://leetcode-cn.com/problems/permutation-in-string/",target:"_blank",rel:"noopener noreferrer"},d=s("LeetCode"),_=s(" \u2B50\u2B50"),h=t(`<p>\u6CE8\u610F\u76EE\u6807\u5B50\u4E32\u957F\u5EA6\u6765\u63A7\u5236\u7A97\u53E3\u5DE6\u53F3\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token comment"># \u5C06\u76EE\u6807\u5B57\u7B26\u4E32\u62C6\u89E3\u4E3A\u6BCF\u4E2A\u5B57\u7B26\u6240\u9700\u8981\u7684\u4E2A\u6570</span>
        s_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> s <span class="token keyword">in</span> s1<span class="token punctuation">:</span>
            s_map<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            s_map<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
            n <span class="token operator">=</span> s2<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
            right <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> n <span class="token keyword">in</span> s_map<span class="token punctuation">:</span>
                s_map<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token comment"># \u76EE\u6807\u5B50\u4E32\u5FC5\u7136\u548Cs1\u957F\u5EA6\u76F8\u7B49</span>
            <span class="token keyword">if</span> right <span class="token operator">-</span> left <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token builtin">all</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> s_map<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">True</span>
                d <span class="token operator">=</span> s2<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> d <span class="token keyword">in</span> s_map<span class="token punctuation">:</span>
                    s_map<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="_438-\u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD" tabindex="-1"><a class="header-anchor" href="#_438-\u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD" aria-hidden="true">#</a> 438. \u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u6240\u6709\u5B57\u6BCD\u5F02\u4F4D\u8BCD</h2>`,3),f={href:"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/",target:"_blank",rel:"noopener noreferrer"},y=s("LeetCode"),w=s(" \u2B50\u2B50"),g=t(`<p>\u539F\u7406\u540C 567\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        p_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> _p <span class="token keyword">in</span> p<span class="token punctuation">:</span>
            p_map<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>_p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            p_map<span class="token punctuation">[</span>_p<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
            n <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
            right <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> n <span class="token keyword">in</span> p_map<span class="token punctuation">:</span>
                p_map<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> right <span class="token operator">-</span> left <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token builtin">all</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> p_map<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">)</span>
                d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> d <span class="token keyword">in</span> p_map<span class="token punctuation">:</span>
                    p_map<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="_76-\u6700\u5C0F\u8986\u76D6\u5B50\u4E32" tabindex="-1"><a class="header-anchor" href="#_76-\u6700\u5C0F\u8986\u76D6\u5B50\u4E32" aria-hidden="true">#</a> 76. \u6700\u5C0F\u8986\u76D6\u5B50\u4E32</h2>`,3),v={href:"https://leetcode-cn.com/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"},x=s("LeetCode"),q=s(" \u2B50\u2B50\u2B50"),L=t(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">minWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        t_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> _t <span class="token keyword">in</span> t<span class="token punctuation">:</span>
            t_map<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>_t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            t_map<span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        <span class="token comment"># \u5F53\u524D\u7A97\u53E3\u5185\u6EE1\u8DB3\u6570\u91CF\u7684\u5B57\u7B26\u6570\uFF0C\u7A97\u53E3\u5185\u67D0\u4E2A\u5B57\u7B26\u7684\u6570\u91CF\u4E0D\u5C11\u4E8E\u5176\u6240\u9700</span>
        valid <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment"># \u8BB0\u5F55\u6EE1\u8DB3\u6761\u4EF6\u7684\u5B50\u4E32\u8D77\u59CB\u4F4D\u7F6E\u548C\u957F\u5EA6</span>
        start<span class="token punctuation">,</span> min_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># \u53F3\u6307\u9488\u53F3\u79FB\u5C06\u5176\u539F\u5148\u4F4D\u7F6E\u7684\u5B57\u7B26\u6ED1\u5165\u7A97\u53E3</span>
            n <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
            right <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> n <span class="token keyword">in</span> t_map<span class="token punctuation">:</span>
                t_map<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> t_map<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    valid <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token comment"># \u5982\u679C\u7A97\u53E3\u4F7F\u5F97\u6240\u6709\u5B57\u7B26\u90FD\u6EE1\u8DB3\u6570\u91CF\uFF0C\u5F00\u59CB\u5DE6\u4FA7\u6536\u7F29</span>
            <span class="token keyword">while</span> valid <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t_map<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> right <span class="token operator">-</span> left <span class="token operator">&lt;</span> min_len<span class="token punctuation">:</span>
                    start<span class="token punctuation">,</span> min_len <span class="token operator">=</span> left<span class="token punctuation">,</span> right <span class="token operator">-</span> left
                m <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> m <span class="token keyword">in</span> t_map<span class="token punctuation">:</span>
                    <span class="token keyword">if</span> t_map<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        valid <span class="token operator">-=</span> <span class="token number">1</span>
                    t_map<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> min_len <span class="token operator">==</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> s<span class="token punctuation">[</span>start<span class="token punctuation">:</span> start <span class="token operator">+</span> min_len<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div>`,1);function C(N,S){const a=e("ExternalLinkIcon");return o(),c(l,null,[i,k,b,n("p",null,[n("a",m,[d,p(a)]),_]),h,n("p",null,[n("a",f,[y,p(a)]),w]),g,n("p",null,[n("a",v,[x,p(a)]),q]),L],64)}var E=r(u,[["render",C]]);export{E as default};

import{r as l,o as u,c as r,a as n,d as a,w as t,F as i,b as s,e as p}from"./app.e5ee52ef.js";import{_ as k}from"./plugin-vue_export-helper.21dcd24c.js";const b={},d=n("h1",{id:"\u4E8C\u53C9\u641C\u7D22\u6811",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u4E8C\u53C9\u641C\u7D22\u6811","aria-hidden":"true"},"#"),s(" \u4E8C\u53C9\u641C\u7D22\u6811")],-1),m=n("p",null,"\u5BF9\u4E8E\u4E8C\u53C9\u641C\u7D22\u6811 BST \u7684\u6BCF\u2F00\u4E2A\u8282\u70B9 node\uFF0C\u5176\u5DE6\u2F26\u6811\u8282\u70B9\u7684\u503C\u90FD\u2F50 node \u7684\u503C\u2F29\uFF0C\u5176\u53F3\u2F26\u6811\u8282\u70B9\u7684\u503C\u90FD\u2F50 node \u7684\u503C\u2F24\uFF0C\u4E14\u5DE6\u2F26\u6811\u548C\u53F3\u2F26\u6811\u4E5F\u90FD\u662F BST\u3002",-1),f=n("p",null,"\u56E0\u6B64\uFF0CBST \u7684\u4E2D\u5E8F\u904D\u5386\u7ED3\u679C\u662F\u6709\u5E8F\u7684\uFF08\u5347\u5E8F\uFF09\u3002",-1),h=n("h2",{id:"_700-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u641C\u7D22",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_700-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u641C\u7D22","aria-hidden":"true"},"#"),s(" 700. \u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u641C\u7D22")],-1),y={href:"https://leetcode-cn.com/problems/search-in-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},w=s("LeetCode"),_=s(" \u2B50"),v=p(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>root<span class="token punctuation">,</span> val<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">traverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> TreeNode<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token comment"># \u5229\u7528 BST \u6027\u8D28\u7B80\u5316\u904D\u5386</span>
        <span class="token keyword">elif</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>
            <span class="token keyword">return</span> root
        <span class="token keyword">elif</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val<span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_98-\u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811" tabindex="-1"><a class="header-anchor" href="#_98-\u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811" aria-hidden="true">#</a> 98. \u9A8C\u8BC1\u4E8C\u53C9\u641C\u7D22\u6811</h2>`,2),g={href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},T=s("LeetCode"),x=s(" \u2B50\u2B50"),N=n("p",null,"\u4E0D\u4F7F\u7528\u5DE6\u53F3\u5B50\u6811\u5411\u4E0A\u53CD\u9988\u7684\u65B9\u5F0F\uFF08\u540E\u7EED\u904D\u5386\uFF09\uFF0C\u800C\u901A\u8FC7\u9650\u5236\u5B50\u6811\u6700\u5927\u6700\u5C0F\u503C\u7684\u65B9\u5F0F\uFF08\u524D\u5E8F\u904D\u5386\uFF09\uFF0C\u5F88\u5DE7\u5999\u3002",-1),S=n("div",{class:"language-python ext-py line-numbers-mode"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"isValidBST"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" TreeNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token builtin"},"bool"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" self"),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"None"),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" TreeNode"),n("span",{class:"token punctuation"},","),s(" minVal"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" maxVal"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token builtin"},"bool"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token keyword"},"not"),s(" root"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"True"),s(`

        `),n("span",{class:"token keyword"},"if"),s(" minVal "),n("span",{class:"token keyword"},"is"),s(),n("span",{class:"token keyword"},"not"),s(),n("span",{class:"token boolean"},"None"),s(),n("span",{class:"token keyword"},"and"),s(" root"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<="),s(" minVal"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"False"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" maxVal "),n("span",{class:"token keyword"},"is"),s(),n("span",{class:"token keyword"},"not"),s(),n("span",{class:"token boolean"},"None"),s(),n("span",{class:"token keyword"},"and"),s(" root"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},">="),s(" maxVal"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"False"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" self"),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" minVal"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"and"),s(" self"),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},","),s(" maxVal"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br")])],-1),B=n("div",{class:"language-python ext-py line-numbers-mode"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"isValidBST"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" TreeNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token builtin"},"bool"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" self"),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(`

    `),n("span",{class:"token comment"},"# (\u662F\u5426BST, \u6811\u6700\u5C0F\u503C, \u6811\u6700\u5927\u503C)"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" TreeNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token builtin"},"tuple"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token keyword"},"not"),s(" root"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"inf"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"float"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"-inf"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

        leftRes `),n("span",{class:"token operator"},"="),s(" self"),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
        rightRes `),n("span",{class:"token operator"},"="),s(" self"),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`

        `),n("span",{class:"token comment"},"# \u5DE6\u53F3\u5B50\u6811\u5747\u4E3A BST \u4E14\u6839\u8282\u70B9\u5927\u4E8E\u5DE6\u5B50\u6811\u6700\u5927\u503C\u5E76\u5C0F\u4E8E\u53F3\u5B50\u6811\u6700\u5C0F\u503C"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" leftRes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"and"),s(" rightRes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"and"),s(" root"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},">"),s(" leftRes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"and"),s(" root"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"<"),s(" rightRes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":"),s(`
            rootMin `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"min"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s("root"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},","),s(" leftRes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
            rootMax `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"max"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),s("root"),n("span",{class:"token punctuation"},"."),s("val"),n("span",{class:"token punctuation"},","),s(" rightRes"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},","),s(" rootMin"),n("span",{class:"token punctuation"},","),s(" rootMax"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br")])],-1),R=n("h2",{id:"_701-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u63D2\u5165\u64CD\u4F5C",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_701-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u63D2\u5165\u64CD\u4F5C","aria-hidden":"true"},"#"),s(" 701. \u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u63D2\u5165\u64CD\u4F5C")],-1),V={href:"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},C=s("LeetCode"),L=s(" \u2B50\u2B50"),O=n("div",{class:"language-python ext-py line-numbers-mode"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"insertIntoBST"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" TreeNode"),n("span",{class:"token punctuation"},","),s(" val"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(" TreeNode"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token keyword"},"not"),s(" root"),n("span",{class:"token punctuation"},":"),s(`
            root `),n("span",{class:"token operator"},"="),s(" TreeNode"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"elif"),s(" root"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},">"),s(" val"),n("span",{class:"token punctuation"},":"),s(`
            root`),n("span",{class:"token punctuation"},"."),s("left "),n("span",{class:"token operator"},"="),s(" self"),n("span",{class:"token punctuation"},"."),s("insertIntoBST"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" val"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":"),s(`
            root`),n("span",{class:"token punctuation"},"."),s("right "),n("span",{class:"token operator"},"="),s(" self"),n("span",{class:"token punctuation"},"."),s("insertIntoBST"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" val"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` root
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br")])],-1),I=n("div",{class:"language-python ext-py line-numbers-mode"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"insertIntoBST"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" TreeNode"),n("span",{class:"token punctuation"},","),s(" val"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(" TreeNode"),n("span",{class:"token punctuation"},":"),s(`
        node `),n("span",{class:"token operator"},"="),s(" TreeNode"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token keyword"},"not"),s(" root"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"return"),s(` node

        cur `),n("span",{class:"token operator"},"="),s(` root
        `),n("span",{class:"token keyword"},"while"),s(" cur"),n("span",{class:"token punctuation"},":"),s(`
            parent `),n("span",{class:"token operator"},"="),s(` cur
            cur `),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},"."),s("left "),n("span",{class:"token keyword"},"if"),s(" cur"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},">"),s(" val "),n("span",{class:"token keyword"},"else"),s(" cur"),n("span",{class:"token punctuation"},"."),s(`right

        `),n("span",{class:"token keyword"},"if"),s(" parent"),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},">"),s(" val"),n("span",{class:"token punctuation"},":"),s(`
            parent`),n("span",{class:"token punctuation"},"."),s("left "),n("span",{class:"token operator"},"="),s(` node
        `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":"),s(`
            parent`),n("span",{class:"token punctuation"},"."),s("right "),n("span",{class:"token operator"},"="),s(` node

        `),n("span",{class:"token keyword"},"return"),s(` root
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br")])],-1),M=n("h2",{id:"_230-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7B2C-k-\u5C0F\u7684\u5143\u7D20",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_230-\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7B2C-k-\u5C0F\u7684\u5143\u7D20","aria-hidden":"true"},"#"),s(" 230. \u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7B2C K \u5C0F\u7684\u5143\u7D20")],-1),F={href:"https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/",target:"_blank",rel:"noopener noreferrer"},G=s("LeetCode"),E=s(" \u2B50\u2B50"),q=n("p",null,"\u5229\u7528\u4E2D\u5E8F\u904D\u5386\u7684\u7279\u70B9\u3002",-1),K=n("div",{class:"language-python ext-py line-numbers-mode"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"kthSmallest"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" Optional"),n("span",{class:"token punctuation"},"["),s("TreeNode"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" k"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},":"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("rank "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("res "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"None"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},","),s(" k"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" self"),n("span",{class:"token punctuation"},"."),s(`res

    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" Optional"),n("span",{class:"token punctuation"},"["),s("TreeNode"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" k"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token keyword"},"not"),s(" root"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"return"),s(`

        self`),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},","),s(" k"),n("span",{class:"token punctuation"},")"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("rank "),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" self"),n("span",{class:"token punctuation"},"."),s("rank "),n("span",{class:"token operator"},"=="),s(" k"),n("span",{class:"token punctuation"},":"),s(`
            self`),n("span",{class:"token punctuation"},"."),s("res "),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s(`val
            `),n("span",{class:"token keyword"},"return"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},","),s(" k"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br")])],-1),j=n("div",{class:"language-python ext-py line-numbers-mode"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"kthSmallest"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" Optional"),n("span",{class:"token punctuation"},"["),s("TreeNode"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" k"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},":"),s(`
        stack `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`

        `),n("span",{class:"token keyword"},"while"),s(" root "),n("span",{class:"token keyword"},"or"),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"while"),s(" root"),n("span",{class:"token punctuation"},":"),s(`
                stack`),n("span",{class:"token punctuation"},"."),s("append"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(`
                root `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s(`left
            root `),n("span",{class:"token operator"},"="),s(" stack"),n("span",{class:"token punctuation"},"."),s("pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
            k `),n("span",{class:"token operator"},"-="),s(),n("span",{class:"token number"},"1"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" k "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},":"),s(`
                `),n("span",{class:"token keyword"},"return"),s(" root"),n("span",{class:"token punctuation"},"."),s(`val
            root `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s(`right
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br")])],-1),z=n("h2",{id:"_450-\u5220\u9664\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u8282\u70B9",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_450-\u5220\u9664\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u8282\u70B9","aria-hidden":"true"},"#"),s(" 450. \u5220\u9664\u4E8C\u53C9\u641C\u7D22\u6811\u4E2D\u7684\u8282\u70B9")],-1),A={href:"https://leetcode-cn.com/problems/delete-node-in-a-bst/",target:"_blank",rel:"noopener noreferrer"},D=s("LeetCode"),H=s(" \u2B50\u2B50"),J=p(`<p>\u88AB\u5220\u9664\u8282\u70B9\u5B58\u5728\u5DE6\u53F3\u5B50\u6811\u65F6\u6700\u4E3A\u590D\u6742\uFF0C\u8003\u8651\u7528\u5DE6\u5B50\u6811\u4E2D\u6700\u5927\u7684\u8282\u70B9\u6216\u53F3\u5B50\u6811\u4E2D\u6700\u5C0F\u7684\u8282\u70B9\u53D6\u4EE3\u88AB\u5220\u9664\u8282\u70B9\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
        <span class="token keyword">elif</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> key<span class="token punctuation">:</span>
            root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>deleteNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> key<span class="token punctuation">:</span>
            root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>deleteNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left
            <span class="token keyword">elif</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment"># \u5BFB\u627E\u53F3\u5B50\u6811\u4E2D\u6700\u5C0F\u8282\u70B9</span>
                cur <span class="token operator">=</span> root<span class="token punctuation">.</span>right
                <span class="token keyword">while</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left
                root<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>deleteNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
                cur<span class="token punctuation">.</span>left<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right
                root <span class="token operator">=</span> cur
        <span class="token keyword">return</span> root
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="_538-\u628A\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u6362\u4E3A\u7D2F\u52A0\u6811" tabindex="-1"><a class="header-anchor" href="#_538-\u628A\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u6362\u4E3A\u7D2F\u52A0\u6811" aria-hidden="true">#</a> 538. \u628A\u4E8C\u53C9\u641C\u7D22\u6811\u8F6C\u6362\u4E3A\u7D2F\u52A0\u6811</h2>`,3),P={href:"https://leetcode-cn.com/problems/convert-bst-to-greater-tree/",target:"_blank",rel:"noopener noreferrer"},Q=s("LeetCode"),U=s(" \u2B50\u2B50"),W=n("div",{class:"language-python ext-py line-numbers-mode"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"convertBST"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" Optional"),n("span",{class:"token punctuation"},"["),s("TreeNode"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(" Optional"),n("span",{class:"token punctuation"},"["),s("TreeNode"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("sumVal "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` root

    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" Optional"),n("span",{class:"token punctuation"},"["),s("TreeNode"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token keyword"},"not"),s(" root"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"return"),s(`

        self`),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("sumVal "),n("span",{class:"token operator"},"+="),s(" root"),n("span",{class:"token punctuation"},"."),s(`val
        root`),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"="),s(" self"),n("span",{class:"token punctuation"},"."),s(`sumVal
        self`),n("span",{class:"token punctuation"},"."),s("traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br")])],-1),X=n("div",{class:"language-python ext-py line-numbers-mode"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"convertBST"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" root"),n("span",{class:"token punctuation"},":"),s(" Optional"),n("span",{class:"token punctuation"},"["),s("TreeNode"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(" Optional"),n("span",{class:"token punctuation"},"["),s("TreeNode"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":"),s(`
        node `),n("span",{class:"token operator"},"="),s(` root
        sumVal `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
        stack `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`

        `),n("span",{class:"token keyword"},"while"),s(" node "),n("span",{class:"token keyword"},"or"),s(" stack"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"while"),s(" node"),n("span",{class:"token punctuation"},":"),s(`
                stack`),n("span",{class:"token punctuation"},"."),s("append"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),s(`
                node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s(`right
            node `),n("span",{class:"token operator"},"="),s(" stack"),n("span",{class:"token punctuation"},"."),s("pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
            sumVal `),n("span",{class:"token operator"},"+="),s(" node"),n("span",{class:"token punctuation"},"."),s(`val
            node`),n("span",{class:"token punctuation"},"."),s("val "),n("span",{class:"token operator"},"="),s(` sumVal
            node `),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s(`left

        `),n("span",{class:"token keyword"},"return"),s(` root
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br")])],-1),Y=n("h2",{id:"_96-\u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_96-\u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811","aria-hidden":"true"},"#"),s(" 96. \u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811")],-1),Z={href:"https://leetcode-cn.com/problems/unique-binary-search-trees/",target:"_blank",rel:"noopener noreferrer"},$=s("LeetCode"),nn=s(" \u2B50\u2B50"),sn=p(`<p>\u4E8C\u53C9\u641C\u7D22\u6811\u548C\u52A8\u6001\u89C4\u5212\u7ED3\u5408\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">numTrees</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>n<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">traverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span>

        s <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            s <span class="token operator">+=</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> s
        <span class="token keyword">return</span> s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_95-\u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811-ii" tabindex="-1"><a class="header-anchor" href="#_95-\u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811-ii" aria-hidden="true">#</a> 95. \u4E0D\u540C\u7684\u4E8C\u53C9\u641C\u7D22\u6811 II</h2>`,3),an={href:"https://leetcode-cn.com/problems/unique-binary-search-trees-ii/",target:"_blank",rel:"noopener noreferrer"},tn=s("LeetCode"),en=s(" \u2B50\u2B50"),on=p(`<p>\u601D\u8DEF\u548C\u524D\u4E00\u9898\u57FA\u672C\u4E00\u81F4\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">generateTrees</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">traverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> low<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> high<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
        tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> low <span class="token operator">&gt;</span> high<span class="token punctuation">:</span>
            tree<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>low<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            right <span class="token operator">=</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>
            <span class="token keyword">for</span> lRoot <span class="token keyword">in</span> left<span class="token punctuation">:</span>
                <span class="token keyword">for</span> rRoot <span class="token keyword">in</span> right<span class="token punctuation">:</span>
                    tree<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span>i<span class="token punctuation">,</span> lRoot<span class="token punctuation">,</span> rRoot<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> tree
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_1373-\u4E8C\u53C9\u641C\u7D22\u5B50\u6811\u7684\u6700\u5927\u952E\u503C\u548C" tabindex="-1"><a class="header-anchor" href="#_1373-\u4E8C\u53C9\u641C\u7D22\u5B50\u6811\u7684\u6700\u5927\u952E\u503C\u548C" aria-hidden="true">#</a> 1373. \u4E8C\u53C9\u641C\u7D22\u5B50\u6811\u7684\u6700\u5927\u952E\u503C\u548C</h2>`,3),pn={href:"https://leetcode-cn.com/problems/maximum-sum-bst-in-binary-tree/",target:"_blank",rel:"noopener noreferrer"},cn=s("LeetCode"),ln=s(" \u2B50\u2B50\u2B50"),un=p(`<p>\u7ACB\u8DB3\u4E8E\u5F53\u524D\u8282\u70B9\uFF0C\u9700\u8981\u77E5\u9053\u4EE5\u4E0B\u5177\u4F53\u4FE1\u606F\uFF1A\u5DE6\u53F3\u2F26\u6811\u662F\u5426\u662F BST\u3001\u5DE6\u2F26\u6811\u7684\u6700\u2F24\u503C\u548C\u53F3\u2F26\u6811\u7684\u6700\u2F29\u503C\u3001\u5DE6\u53F3\u2F26\u6811\u7684\u8282\u70B9\u503C\u4E4B\u548C\u3002 \u91C7\u7528\u540E\u7EED\u904D\u5386\u7684\u65B9\u5F0F\uFF0C\u53EF\u4EE5\u6709\u6548\u5730\u7EF4\u62A4\u6240\u9700\u8981\u7684\u5177\u4F53\u4FE1\u606F\u3002</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">maxSumBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>maxBstSum <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>maxBstSum

    <span class="token keyword">def</span> <span class="token function">traverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">40001</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">40001</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

        leftRes <span class="token operator">=</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        rightRes <span class="token operator">=</span> self<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>

        <span class="token keyword">if</span> leftRes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> rightRes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> leftRes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">and</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> rightRes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            rootMin <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> leftRes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            rootMax <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> rightRes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            rootSum <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> leftRes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightRes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>maxBstSum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>maxBstSum<span class="token punctuation">,</span> rootSum<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> rootMin<span class="token punctuation">,</span> rootMax<span class="token punctuation">,</span> rootSum<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,2);function rn(kn,bn){const e=l("ExternalLinkIcon"),o=l("CodeGroupItem"),c=l("CodeGroup");return u(),r(i,null,[d,m,f,h,n("p",null,[n("a",y,[w,a(e)]),_]),v,n("p",null,[n("a",g,[T,a(e)]),x]),N,a(c,null,{default:t(()=>[a(o,{title:"\u524D\u5E8F\u904D\u5386"},{default:t(()=>[S]),_:1}),a(o,{title:"\u540E\u5E8F\u904D\u5386"},{default:t(()=>[B]),_:1})]),_:1}),R,n("p",null,[n("a",V,[C,a(e)]),L]),a(c,null,{default:t(()=>[a(o,{title:"\u9012\u5F52"},{default:t(()=>[O]),_:1}),a(o,{title:"\u8FED\u4EE3"},{default:t(()=>[I]),_:1})]),_:1}),M,n("p",null,[n("a",F,[G,a(e)]),E]),q,a(c,null,{default:t(()=>[a(o,{title:"\u9012\u5F52"},{default:t(()=>[K]),_:1}),a(o,{title:"\u8FED\u4EE3"},{default:t(()=>[j]),_:1})]),_:1}),z,n("p",null,[n("a",A,[D,a(e)]),H]),J,n("p",null,[n("a",P,[Q,a(e)]),U]),a(c,null,{default:t(()=>[a(o,{title:"\u9012\u5F52"},{default:t(()=>[W]),_:1}),a(o,{title:"\u8FED\u4EE3"},{default:t(()=>[X]),_:1})]),_:1}),Y,n("p",null,[n("a",Z,[$,a(e)]),nn]),sn,n("p",null,[n("a",an,[tn,a(e)]),en]),on,n("p",null,[n("a",pn,[cn,a(e)]),ln]),un],64)}var fn=k(b,[["render",rn]]);export{fn as default};
